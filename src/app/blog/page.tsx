import { IArticle } from "@/lib/interfaces/http/article.interface";
import ArticleComponent from "../components/Article";

function renderArticles(articles: IArticle[]) {
  if (articles.length === 0) {
    return (
      <div className="text-center py-24">
        <p className="text-3xl text-inactive underline underline-offset-8 decoration-secondary mb-3.5">
          Oh I so sorry! Ours articles are no available yet!
        </p>
        <p>{"As soon as possible we'll have our articles listed here üòâ"}</p>
      </div>
    );
  }
  return articles.map((article) => (
    <ArticleComponent key={article.id} article={article} />
  ));
}

export default function BlogMainPage() {
  const articles: IArticle[] = [
    {
      id: "1",
      articleImageSrc:
        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQysm7d0JnuK4_jPG6U3Fyd1cRzbb78Z_7-4g&s",
      title: "Guia Completo de JavaScript",
      briefDescription: "Tudo sobre JavaScript moderno com exemplos e imagens.",
      description: `# Guia Completo de JavaScript üöÄ

        ![JavaScript](https://upload.wikimedia.org/wikipedia/commons/6/6a/JavaScript-logo.png)

        O JavaScript √© uma das linguagens mais populares do mundo. Com o ES6+, recursos como **Arrow Functions**, **Desestrutura√ß√£o**, e **Async/Await** tornaram o c√≥digo mais limpo e poderoso.

        ## üìå Recursos abordados

        - Arrow Functions
        - Desestrutura√ß√£o de objetos
        - Promises e async/await
        - Manipula√ß√£o de DOM
        - Classes e m√≥dulos

        ## üì∏ Exemplo de Imagem

        ![DOM](https://developer.mozilla.org/static/img/web-docs-sprite.22a6a085cf14.svg)

        ## üíª Exemplo de c√≥digo

        \`\`\`js
        const hello = (name) => {
          return \`Ol√°, \${name}!\`;
        };

        console.log(hello("JavaScript"));
        // Sa√≠da: Ol√°, JavaScript!
        \`\`\`

        > _"JavaScript √© a linguagem da web."_
        `,
      slug: "guia-javascript",
      createdAt: "12 March",
    },
    {
      id: "2",
      articleImageSrc: "https://picsum.photos/id/237/600/400",
      title: "React para Iniciantes",
      briefDescription:
        "Entenda os fundamentos do React com exemplos pr√°ticos.",
      description: `# React para Iniciantes ‚öõÔ∏è

        ![React](https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg)

        React √© uma biblioteca JavaScript declarativa e baseada em componentes para criar interfaces de usu√°rio.

        ## üîß Componentes

        - Funcionais
        - Baseados em Classe
        - Props e State
        - Hooks (useState, useEffect)

        ## Exemplo com useState

        \`\`\`js
        import { useState } from "react";

        function Contador() {
          const [contador, setContador] = useState(0);

          return <button onClick={() => setContador(contador + 1)}>{contador}</button>;
        }
        \`\`\`

        > "Uma interface √© uma fun√ß√£o do estado."
        `,
      slug: "react-para-iniciantes",
      createdAt: "15 March",
    },
    {
      id: "3",
      articleImageSrc: "https://picsum.photos/id/1015/600/400",
      title: "Node.js na Pr√°tica",
      briefDescription: "Construa APIs com Node.js de forma simples e direta.",
      description: `# Node.js na Pr√°tica üåê

        ![Node.js](https://nodejs.org/static/images/logo.svg)

        Node.js permite que voc√™ crie aplica√ß√µes JavaScript no lado do servidor com alta performance.

        ## üì¶ T√≥picos

        - M√≥dulo HTTP
        - Express.js
        - Middlewares
        - API REST

        ### C√≥digo com Express

        \`\`\`js
        const express = require('express');
        const app = express();

        app.get('/', (req, res) => res.send('Ol√°, Node!'));
        app.listen(3000);
        \`\`\`

        > _"JavaScript em todos os lugares."_
        `,
      slug: "nodejs-na-pratica",
      createdAt: "18 March",
    },
    {
      id: "4",
      articleImageSrc: "https://picsum.photos/id/1005/600/400",
      title: "CSS Moderno com Tailwind",
      briefDescription:
        "Estilize sua aplica√ß√£o com produtividade usando Tailwind CSS.",
      description: `# CSS Moderno com Tailwind üé®

        ![Tailwind](https://tailwindcss.com/_next/static/media/twitter-card.f6c9252b.jpg)

        Tailwind CSS √© um framework utilit√°rio para cria√ß√£o de interfaces elegantes e responsivas.

        ## üìö T√≥picos

        - Utility-first
        - Responsividade
        - Dark mode
        - Customiza√ß√£o

        ### Exemplo

        \`\`\`html
        <button class="bg-blue-500 text-white px-4 py-2 rounded">Clique aqui</button>
        \`\`\`

        > "Estilo sem sair do HTML!"
        `,
      slug: "css-tailwind",
      createdAt: "21 March",
    },
    {
      id: "5",
      articleImageSrc: "https://picsum.photos/id/1056/600/400",
      title: "Git e GitHub: Controle de Vers√£o",
      briefDescription: "Domine o versionamento de c√≥digo com Git e GitHub.",
      description: `# Git e GitHub üóÇÔ∏è

        ![Git](https://git-scm.com/images/logos/downloads/Git-Icon-1788C.png)

        Git √© o sistema de controle de vers√£o mais usado no mundo, e o GitHub √© a principal plataforma para hosped√°-los.

        ## Comandos √∫teis

        - \`git init\`
        - \`git status\`
        - \`git add .\`
        - \`git commit -m "mensagem"\`
        - \`git push origin main\`

        > _"Commite cedo, commite sempre."_
        `,
      slug: "git-e-github",
      createdAt: "25 March",
    },
    {
      id: "6",
      articleImageSrc: "https://picsum.photos/id/1060/600/400",
      title: "APIs REST com Express",
      briefDescription: "Crie APIs de forma eficiente usando Express.js.",
      description: `# APIs REST com Express üöÄ

        ## Criando um CRUD b√°sico

        \`\`\`js
        const express = require("express");
        const app = express();

        app.use(express.json());

        app.get("/users", (req, res) => {
          res.json([{ id: 1, name: "Jo√£o" }]);
        });

        app.listen(3000, () => console.log("API rodando..."));
        \`\`\`

        > "APIs simples, r√°pidas e elegantes."
        `,
      slug: "apis-rest-express",
      createdAt: "28 March",
    },
    {
      id: "7",
      articleImageSrc: "https://picsum.photos/id/1021/600/400",
      title: "Banco de Dados com PostgreSQL",
      briefDescription: "Aprenda os fundamentos do PostgreSQL para back-end.",
      description: `# Banco de Dados com PostgreSQL üõ¢Ô∏è

        ## Comandos b√°sicos

        - \`CREATE TABLE users (...)\`
        - \`INSERT INTO users VALUES (...)\`
        - \`SELECT * FROM users;\`

        ## Exemplo ERD

        ![ERD](https://www.vertabelo.com/blog/img/2020/06/ERD_01.png)

        > "Dados bem modelados, sistema eficiente."
        `,
      slug: "postgresql-fundamentos",
      createdAt: "30 March",
    },
    {
      id: "8",
      articleImageSrc: "https://picsum.photos/id/1048/600/400",
      title: "Boas Pr√°ticas de C√≥digo",
      briefDescription: "Escreva c√≥digo limpo, leg√≠vel e de f√°cil manuten√ß√£o.",
      description: `# Boas Pr√°ticas de C√≥digo üßº

        ## Dicas essenciais

        - Nomeie vari√°veis de forma clara
        - Comente somente o necess√°rio
        - Divida o c√≥digo em fun√ß√µes pequenas
        - Evite duplica√ß√£o

        ### Exemplo ruim:

        \`\`\`js
        let x = 10;
        let y = 20;
        let z = x + y;
        \`\`\`

        ### Exemplo bom:

        \`\`\`js
        const precoProduto = 10;
        const frete = 20;
        const precoTotal = precoProduto + frete;
        \`\`\`

        > "C√≥digo limpo √© mais importante que c√≥digo curto."
        `,
      slug: "boas-praticas-codigo",
      createdAt: "2 April",
    },
    {
      id: "9",
      articleImageSrc: "https://picsum.photos/id/1050/600/400",
      title: "Deploy de Aplica√ß√µes",
      briefDescription: "Entenda como publicar sua aplica√ß√£o na web.",
      description: `# Deploy de Aplica√ß√µes ‚òÅÔ∏è

        ## Plataformas populares

        - Vercel
        - Netlify
        - Render
        - Railway

        ### Exemplo com Vercel

        1. Push no GitHub
        2. Conectar reposit√≥rio na Vercel
        3. Build autom√°tico
        4. Deploy em segundos!

        > "O deploy n√£o precisa ser dif√≠cil."
        `,
      slug: "deploy-aplicacoes",
      createdAt: "5 April",
    },
    {
      id: "10",
      articleImageSrc: "https://picsum.photos/id/1058/600/400",
      title: "Testes Automatizados com Jest",
      briefDescription: "Introdu√ß√£o aos testes unit√°rios em JavaScript.",
      description: `# Testes Automatizados com Jest ‚úÖ

        ![Jest](https://jestjs.io/img/opengraph.png)

        ## Por que testar?

        - Reduz bugs
        - Ajuda na refatora√ß√£o
        - Garante confiabilidade

        ## Exemplo

        \`\`\`js
        function soma(a, b) {
          return a + b;
        }

        test('soma 1 + 2 √© 3', () => {
          expect(soma(1, 2)).toBe(3);
        });
        \`\`\`

        > _"C√≥digo sem teste √© c√≥digo quebrado."_
        `,
      slug: "testes-com-jest",
      createdAt: "7 April",
    },
  ];

  //     const getRepoCount = await fetchApi.Get<IGetGithubUser>(
  //       "github",
  //       "users/miguelpombodev"
  //     );

  //   const articles: IArticle[] = [];

  return (
    <div className="flex flex-col px-[10] py-10 items-center">
      <h1 className="mb-15 text-5xl md:mb-0">Articles</h1>
      <div className="flex flex-1/2 px-2 flex-col items-center justify-start gap-10 w-full md:px-32">
        {renderArticles(articles)}
      </div>
    </div>
  );
}
